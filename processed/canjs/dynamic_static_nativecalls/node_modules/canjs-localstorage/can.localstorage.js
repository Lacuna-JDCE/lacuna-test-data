(function(define) {___jdce_logger("/node_modules/canjs-localstorage/can.localstorage.js", 0);
  if (typeof define == "undefined") {
    define = function(deps, fn) {___jdce_logger("/node_modules/canjs-localstorage/can.localstorage.js", 1);
      can.Model.LocalStorage = fn(can.Model);
    }
  }

  define(['can/model'], function(Model) {___jdce_logger("/node_modules/canjs-localstorage/can.localstorage.js", 2);
    return Model.extend({
      // Implement local storage handling
      localStore: function(cb) {___jdce_logger("/node_modules/canjs-localstorage/can.localstorage.js", 3);
        var name = this.name,
          data = JSON.parse(window.localStorage[name] || (window.localStorage[name] = '[]')),
          res = cb.call(this, data);
        if (res !== false) {
          can.each(data, function(todo) {___jdce_logger("/node_modules/canjs-localstorage/can.localstorage.js", 4);
            delete todo.editing;
          });
          window.localStorage[name] = JSON.stringify(data);
        }
      },

      findAll: function(params) {___jdce_logger("/node_modules/canjs-localstorage/can.localstorage.js", 5);
        var def = new can.Deferred();
        this.localStore(function(todos) {___jdce_logger("/node_modules/canjs-localstorage/can.localstorage.js", 6);
          var instances = [],
            self = this;
          can.each(todos, function(todo) {___jdce_logger("/node_modules/canjs-localstorage/can.localstorage.js", 7);
            instances.push(new self(todo));
          });
          def.resolve({data: instances});
        });
        return def;
      },

      destroy: function(id) {___jdce_logger("/node_modules/canjs-localstorage/can.localstorage.js", 8);
        var def = new can.Deferred();
        this.localStore(function(){___jdce_logger("/node_modules/canjs-localstorage/can.localstorage.js", 9);});
        return def;
      },

      create: function(){___jdce_logger("/node_modules/canjs-localstorage/can.localstorage.js", 10);},

      update: function(id, attrs) {___jdce_logger("/node_modules/canjs-localstorage/can.localstorage.js", 11);
        var def = new can.Deferred(), todo;
        this.localStore(function(){___jdce_logger("/node_modules/canjs-localstorage/can.localstorage.js", 12);});
        def.resolve({});
        return def;
      }
    }, {});
  });
})(window.define);
