//     Underscore.js 1.8.3
//     http://underscorejs.org
//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {___jdce_logger("/node_modules/underscore/underscore.js", 0);

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var
    push             = ArrayProto.push,
    slice            = ArrayProto.slice,
    toString         = ObjProto.toString,
    hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind,
    nativeCreate       = Object.create;

  // Naked function reference for surrogate-prototype-swapping.
  var Ctor = function(){___jdce_logger("/node_modules/underscore/underscore.js", 1);};

  // Create a safe reference to the Underscore object for use below.
  var _ = function(){___jdce_logger("/node_modules/underscore/underscore.js", 2);};

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.8.3';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var optimizeCb = function(func, context, argCount) {___jdce_logger("/node_modules/underscore/underscore.js", 3);
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(){___jdce_logger("/node_modules/underscore/underscore.js", 4);};
      case 2: return function(){___jdce_logger("/node_modules/underscore/underscore.js", 5);};
      case 3: return function(){___jdce_logger("/node_modules/underscore/underscore.js", 6);};
      case 4: return function(){___jdce_logger("/node_modules/underscore/underscore.js", 7);};
    }
    return function(){___jdce_logger("/node_modules/underscore/underscore.js", 8);};
  };

  // A mostly-internal function to generate callbacks that can be applied
  // to each element in a collection, returning the desired result — either
  // identity, an arbitrary callback, a property matcher, or a property accessor.
  var cb = function(value, context, argCount) {___jdce_logger("/node_modules/underscore/underscore.js", 9);
    if (value == null) return _.identity;
    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
    if (_.isObject(value)) return _.matcher(value);
    return _.property(value);
  };
  _.iteratee = function(){___jdce_logger("/node_modules/underscore/underscore.js", 10);};

  // An internal function for creating assigner functions.
  var createAssigner = function(keysFunc, undefinedOnly) {___jdce_logger("/node_modules/underscore/underscore.js", 11);
    return function(obj) {___jdce_logger("/node_modules/underscore/underscore.js", 12);
      var length = arguments.length;
      if (length < 2 || obj == null) return obj;
      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;
        for (var i = 0; i < l; i++) {
          var key = keys[i];
          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
        }
      }
      return obj;
    };
  };

  // An internal function for creating a new object that inherits from another.
  var baseCreate = function(){___jdce_logger("/node_modules/underscore/underscore.js", 13);};

  var property = function(key) {___jdce_logger("/node_modules/underscore/underscore.js", 14);
    return function(obj) {___jdce_logger("/node_modules/underscore/underscore.js", 15);
      return obj == null ? void 0 : obj[key];
    };
  };

  // Helper for collection methods to determine whether a collection
  // should be iterated as an array or as an object
  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
  var getLength = property('length');
  var isArrayLike = function(collection) {___jdce_logger("/node_modules/underscore/underscore.js", 16);
    var length = getLength(collection);
    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {___jdce_logger("/node_modules/underscore/underscore.js", 17);
    iteratee = optimizeCb(iteratee, context);
    var i, length;
    if (isArrayLike(obj)) {
      for (i = 0, length = obj.length; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {___jdce_logger("/node_modules/underscore/underscore.js", 18);
    iteratee = cb(iteratee, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length);
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Create a reducing function iterating left or right.
  function createReduce(dir) {___jdce_logger("/node_modules/underscore/underscore.js", 19);
    // Optimized iterator function as using arguments.length
    // in the main function will deoptimize the, see #1991.
    function iterator(){___jdce_logger("/node_modules/underscore/underscore.js", 20);}

    return function(){___jdce_logger("/node_modules/underscore/underscore.js", 21);};
  }

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = createReduce(1);

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = createReduce(-1);

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(){___jdce_logger("/node_modules/underscore/underscore.js", 22);};

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {___jdce_logger("/node_modules/underscore/underscore.js", 23);
    var results = [];
    predicate = cb(predicate, context);
    _.each(obj, function(){___jdce_logger("/node_modules/underscore/underscore.js", 24);});
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(){___jdce_logger("/node_modules/underscore/underscore.js", 25);};

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(){___jdce_logger("/node_modules/underscore/underscore.js", 26);};

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {___jdce_logger("/node_modules/underscore/underscore.js", 27);
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given item (using `===`).
  // Aliased as `includes` and `include`.
  _.contains = _.includes = _.include = function(){___jdce_logger("/node_modules/underscore/underscore.js", 28);};

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(){___jdce_logger("/node_modules/underscore/underscore.js", 29);};

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(){___jdce_logger("/node_modules/underscore/underscore.js", 30);};

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(){___jdce_logger("/node_modules/underscore/underscore.js", 31);};

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(){___jdce_logger("/node_modules/underscore/underscore.js", 32);};

  // Return the maximum element (or element-based computation).
  _.max = function(){___jdce_logger("/node_modules/underscore/underscore.js", 33);};

  // Return the minimum element (or element-based computation).
  _.min = function(){___jdce_logger("/node_modules/underscore/underscore.js", 34);};

  // Shuffle a collection, using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  _.shuffle = function(){___jdce_logger("/node_modules/underscore/underscore.js", 35);};

  // Sample **n** random values from a collection.
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(){___jdce_logger("/node_modules/underscore/underscore.js", 36);};

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(){___jdce_logger("/node_modules/underscore/underscore.js", 37);};

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior) {___jdce_logger("/node_modules/underscore/underscore.js", 38);
    return function(){___jdce_logger("/node_modules/underscore/underscore.js", 39);};
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(){___jdce_logger("/node_modules/underscore/underscore.js", 40);});

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(){___jdce_logger("/node_modules/underscore/underscore.js", 41);});

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(){___jdce_logger("/node_modules/underscore/underscore.js", 42);});

  // Safely create a real, live array from anything iterable.
  _.toArray = function(){___jdce_logger("/node_modules/underscore/underscore.js", 43);};

  // Return the number of elements in an object.
  _.size = function(){___jdce_logger("/node_modules/underscore/underscore.js", 44);};

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = function(){___jdce_logger("/node_modules/underscore/underscore.js", 45);};

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(){___jdce_logger("/node_modules/underscore/underscore.js", 46);};

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N.
  _.initial = function(){___jdce_logger("/node_modules/underscore/underscore.js", 47);};

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array.
  _.last = function(){___jdce_logger("/node_modules/underscore/underscore.js", 48);};

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array.
  _.rest = _.tail = _.drop = function(){___jdce_logger("/node_modules/underscore/underscore.js", 49);};

  // Trim out all falsy values from an array.
  _.compact = function(){___jdce_logger("/node_modules/underscore/underscore.js", 50);};

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(){___jdce_logger("/node_modules/underscore/underscore.js", 51);};

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(){___jdce_logger("/node_modules/underscore/underscore.js", 52);};

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(){___jdce_logger("/node_modules/underscore/underscore.js", 53);};

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(){___jdce_logger("/node_modules/underscore/underscore.js", 54);};

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function(){___jdce_logger("/node_modules/underscore/underscore.js", 55);};

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(){___jdce_logger("/node_modules/underscore/underscore.js", 56);};

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(){___jdce_logger("/node_modules/underscore/underscore.js", 57);};

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function(){___jdce_logger("/node_modules/underscore/underscore.js", 58);};

  // Complement of _.zip. Unzip accepts an array of arrays and groups
  // each array's elements on shared indices
  _.unzip = function(){___jdce_logger("/node_modules/underscore/underscore.js", 59);};

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(){___jdce_logger("/node_modules/underscore/underscore.js", 60);};

  // Generator function to create the findIndex and findLastIndex functions
  function createPredicateIndexFinder(dir) {___jdce_logger("/node_modules/underscore/underscore.js", 61);
    return function(){___jdce_logger("/node_modules/underscore/underscore.js", 62);};
  }

  // Returns the first index on an array-like that passes a predicate test
  _.findIndex = createPredicateIndexFinder(1);
  _.findLastIndex = createPredicateIndexFinder(-1);

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(){___jdce_logger("/node_modules/underscore/underscore.js", 63);};

  // Generator function to create the indexOf and lastIndexOf functions
  function createIndexFinder(dir, predicateFind, sortedIndex) {___jdce_logger("/node_modules/underscore/underscore.js", 64);
    return function(){___jdce_logger("/node_modules/underscore/underscore.js", 65);};
  }

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(){___jdce_logger("/node_modules/underscore/underscore.js", 66);};

  // Function (ahem) Functions
  // ------------------

  // Determines whether to execute a function as a constructor
  // or a normal function with the provided arguments
  var executeBound = function(){___jdce_logger("/node_modules/underscore/underscore.js", 67);};

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {___jdce_logger("/node_modules/underscore/underscore.js", 68);
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    var args = slice.call(arguments, 2);
    var bound = function(){___jdce_logger("/node_modules/underscore/underscore.js", 69);};
    return bound;
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder, allowing any combination of arguments to be pre-filled.
  _.partial = function(func) {___jdce_logger("/node_modules/underscore/underscore.js", 70);
    var boundArgs = slice.call(arguments, 1);
    var bound = function(){___jdce_logger("/node_modules/underscore/underscore.js", 71);};
    return bound;
  };

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = function(){___jdce_logger("/node_modules/underscore/underscore.js", 72);};

  // Memoize an expensive function by storing its results.
  _.memoize = function(){___jdce_logger("/node_modules/underscore/underscore.js", 73);};

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(){___jdce_logger("/node_modules/underscore/underscore.js", 74);};

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = _.partial(_.delay, _, 1);

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(){___jdce_logger("/node_modules/underscore/underscore.js", 75);};

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {___jdce_logger("/node_modules/underscore/underscore.js", 76);
    var timeout, args, context, timestamp, result;

    var later = function() {___jdce_logger("/node_modules/underscore/underscore.js", 77);
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    };

    return function() {___jdce_logger("/node_modules/underscore/underscore.js", 78);
      context = this;
      args = arguments;
      timestamp = _.now();
      var callNow = immediate && !timeout;
      if (!timeout) timeout = setTimeout(later, wait);
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }

      return result;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(){___jdce_logger("/node_modules/underscore/underscore.js", 79);};

  // Returns a negated version of the passed-in predicate.
  _.negate = function(){___jdce_logger("/node_modules/underscore/underscore.js", 80);};

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function(){___jdce_logger("/node_modules/underscore/underscore.js", 81);};

  // Returns a function that will only be executed on and after the Nth call.
  _.after = function(){___jdce_logger("/node_modules/underscore/underscore.js", 82);};

  // Returns a function that will only be executed up to (but not including) the Nth call.
  _.before = function(){___jdce_logger("/node_modules/underscore/underscore.js", 83);};

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  // Object Functions
  // ----------------

  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

  function collectNonEnumProps(){___jdce_logger("/node_modules/underscore/underscore.js", 84);}

  // Retrieve the names of an object's own properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = function(obj) {___jdce_logger("/node_modules/underscore/underscore.js", 85);
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve all the property names of an object.
  _.allKeys = function(obj) {___jdce_logger("/node_modules/underscore/underscore.js", 86);
    if (!_.isObject(obj)) return [];
    var keys = [];
    for (var key in obj) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(){___jdce_logger("/node_modules/underscore/underscore.js", 87);};

  // Returns the results of applying the iteratee to each element of the object
  // In contrast to _.map it returns an object
  _.mapObject = function(){___jdce_logger("/node_modules/underscore/underscore.js", 88);};

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(){___jdce_logger("/node_modules/underscore/underscore.js", 89);};

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {___jdce_logger("/node_modules/underscore/underscore.js", 90);
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {___jdce_logger("/node_modules/underscore/underscore.js", 91);
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = createAssigner(_.allKeys);

  // Assigns a given object with all the own properties in the passed-in object(s)
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
  _.extendOwn = _.assign = createAssigner(_.keys);

  // Returns the first key on an object that passes a predicate test
  _.findKey = function(){___jdce_logger("/node_modules/underscore/underscore.js", 92);};

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(object, oiteratee, context) {___jdce_logger("/node_modules/underscore/underscore.js", 93);
    var result = {}, obj = object, iteratee, keys;
    if (obj == null) return result;
    if (_.isFunction(oiteratee)) {
      keys = _.allKeys(obj);
      iteratee = optimizeCb(oiteratee, context);
    } else {
      keys = flatten(arguments, false, false, 1);
      iteratee = function(){___jdce_logger("/node_modules/underscore/underscore.js", 94);};
      obj = Object(obj);
    }
    for (var i = 0, length = keys.length; i < length; i++) {
      var key = keys[i];
      var value = obj[key];
      if (iteratee(value, key, obj)) result[key] = value;
    }
    return result;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(){___jdce_logger("/node_modules/underscore/underscore.js", 95);};

  // Fill in a given object with default properties.
  _.defaults = createAssigner(_.allKeys, true);

  // Creates an object that inherits from the given prototype object.
  // If additional properties are provided then they will be added to the
  // created object.
  _.create = function(){___jdce_logger("/node_modules/underscore/underscore.js", 96);};

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {___jdce_logger("/node_modules/underscore/underscore.js", 97);
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(){___jdce_logger("/node_modules/underscore/underscore.js", 98);};

  // Returns whether an object has a given set of `key:value` pairs.
  _.isMatch = function(){___jdce_logger("/node_modules/underscore/underscore.js", 99);};


  // Internal recursive comparison function for `isEqual`.
  var eq = function(){___jdce_logger("/node_modules/underscore/underscore.js", 100);};

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(){___jdce_logger("/node_modules/underscore/underscore.js", 101);};

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(){___jdce_logger("/node_modules/underscore/underscore.js", 102);};

  // Is a given value a DOM element?
  _.isElement = function(){___jdce_logger("/node_modules/underscore/underscore.js", 103);};

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(){___jdce_logger("/node_modules/underscore/underscore.js", 104);};

  // Is a given variable an object?
  _.isObject = function(obj) {___jdce_logger("/node_modules/underscore/underscore.js", 105);
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {___jdce_logger("/node_modules/underscore/underscore.js", 106);
    _['is' + name] = function(obj) {___jdce_logger("/node_modules/underscore/underscore.js", 107);
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE < 9), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(){___jdce_logger("/node_modules/underscore/underscore.js", 108);};
  }

  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
  // IE 11 (#1621), and in Safari 8 (#1929).
  if (typeof /./ != 'function' && typeof Int8Array != 'object') {
    _.isFunction = function(){___jdce_logger("/node_modules/underscore/underscore.js", 109);};
  }

  // Is a given object a finite number?
  _.isFinite = function(){___jdce_logger("/node_modules/underscore/underscore.js", 110);};

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(){___jdce_logger("/node_modules/underscore/underscore.js", 111);};

  // Is a given value a boolean?
  _.isBoolean = function(){___jdce_logger("/node_modules/underscore/underscore.js", 112);};

  // Is a given value equal to null?
  _.isNull = function(){___jdce_logger("/node_modules/underscore/underscore.js", 113);};

  // Is a given variable undefined?
  _.isUndefined = function(){___jdce_logger("/node_modules/underscore/underscore.js", 114);};

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {___jdce_logger("/node_modules/underscore/underscore.js", 115);
    return obj != null && hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function(){___jdce_logger("/node_modules/underscore/underscore.js", 116);};

  // Keep the identity function around for default iteratees.
  _.identity = function(){___jdce_logger("/node_modules/underscore/underscore.js", 117);};

  // Predicate-generating functions. Often useful outside of Underscore.
  _.constant = function(){___jdce_logger("/node_modules/underscore/underscore.js", 118);};

  _.noop = function(){___jdce_logger("/node_modules/underscore/underscore.js", 119);};

  _.property = property;

  // Generates a function for a given object that returns a given property.
  _.propertyOf = function(){___jdce_logger("/node_modules/underscore/underscore.js", 120);};

  // Returns a predicate for checking whether an object has a given set of
  // `key:value` pairs.
  _.matcher = _.matches = function(attrs) {___jdce_logger("/node_modules/underscore/underscore.js", 121);
    attrs = _.extendOwn({}, attrs);
    return function(){___jdce_logger("/node_modules/underscore/underscore.js", 122);};
  };

  // Run a function **n** times.
  _.times = function(){___jdce_logger("/node_modules/underscore/underscore.js", 123);};

  // Return a random integer between min and max (inclusive).
  _.random = function(){___jdce_logger("/node_modules/underscore/underscore.js", 124);};

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function(){___jdce_logger("/node_modules/underscore/underscore.js", 125);};

   // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {___jdce_logger("/node_modules/underscore/underscore.js", 126);
    var escaper = function(){___jdce_logger("/node_modules/underscore/underscore.js", 127);};
    // Regexes for identifying a key that needs to be escaped
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(){___jdce_logger("/node_modules/underscore/underscore.js", 128);};
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function(object, property, fallback) {___jdce_logger("/node_modules/underscore/underscore.js", 129);
    var value = object == null ? void 0 : object[property];
    if (value === void 0) {
      value = fallback;
    }
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {___jdce_logger("/node_modules/underscore/underscore.js", 130);
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {___jdce_logger("/node_modules/underscore/underscore.js", 131);
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {___jdce_logger("/node_modules/underscore/underscore.js", 132);
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {___jdce_logger("/node_modules/underscore/underscore.js", 133);
      source += text.slice(index, offset).replace(escaper, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offest.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    try {
      var render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(){___jdce_logger("/node_modules/underscore/underscore.js", 134);};

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(){___jdce_logger("/node_modules/underscore/underscore.js", 135);};

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(){___jdce_logger("/node_modules/underscore/underscore.js", 136);};

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {___jdce_logger("/node_modules/underscore/underscore.js", 137);
    _.each(_.functions(obj), function(name) {___jdce_logger("/node_modules/underscore/underscore.js", 138);
      var func = _[name] = obj[name];
      _.prototype[name] = function(){___jdce_logger("/node_modules/underscore/underscore.js", 139);};
    });
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {___jdce_logger("/node_modules/underscore/underscore.js", 140);
    var method = ArrayProto[name];
    _.prototype[name] = function(){___jdce_logger("/node_modules/underscore/underscore.js", 141);};
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {___jdce_logger("/node_modules/underscore/underscore.js", 142);
    var method = ArrayProto[name];
    _.prototype[name] = function(){___jdce_logger("/node_modules/underscore/underscore.js", 143);};
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function(){___jdce_logger("/node_modules/underscore/underscore.js", 144);};

  // Provide unwrapping proxy for some methods used in engine operations
  // such as arithmetic and JSON stringification.
  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

  _.prototype.toString = function(){___jdce_logger("/node_modules/underscore/underscore.js", 145);};

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (typeof define === 'function' && define.amd) {
    define('underscore', [], function(){___jdce_logger("/node_modules/underscore/underscore.js", 146);});
  }
}.call(this));
