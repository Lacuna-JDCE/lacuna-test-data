(function webpackUniversalModuleDefinition(root, factory) {___jdce_logger("/node_modules/alt/dist/alt.js", 0);
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Alt"] = factory();
	else
		root["Alt"] = factory();
})(this, function() {___jdce_logger("/node_modules/alt/dist/alt.js", 1);
return /******/ (function(modules) {___jdce_logger("/node_modules/alt/dist/alt.js", 2); // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {___jdce_logger("/node_modules/alt/dist/alt.js", 3);

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {___jdce_logger("/node_modules/alt/dist/alt.js", 4);

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {___jdce_logger("/node_modules/alt/dist/alt.js", 5);

	/* global window */
	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	var _bind = Function.prototype.bind;

	var _get = function get(_x3, _x4, _x5) {___jdce_logger("/node_modules/alt/dist/alt.js", 6); var _again = true; _function: while (_again) { var object = _x3, property = _x4, receiver = _x5; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x3 = parent; _x4 = property; _x5 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	var _createClass = (function () {___jdce_logger("/node_modules/alt/dist/alt.js", 7); function defineProperties(target, props) {___jdce_logger("/node_modules/alt/dist/alt.js", 8); for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) {___jdce_logger("/node_modules/alt/dist/alt.js", 9); if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireDefault(obj) {___jdce_logger("/node_modules/alt/dist/alt.js", 10); return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _interopRequireWildcard(obj) {___jdce_logger("/node_modules/alt/dist/alt.js", 11); if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _toConsumableArray(arr) {___jdce_logger("/node_modules/alt/dist/alt.js", 12); if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

	function _inherits(subClass, superClass) {___jdce_logger("/node_modules/alt/dist/alt.js", 13); if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) {___jdce_logger("/node_modules/alt/dist/alt.js", 14); if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _flux = __webpack_require__(2);

	var _utilsStateFunctions = __webpack_require__(5);

	var StateFunctions = _interopRequireWildcard(_utilsStateFunctions);

	var _utilsFunctions = __webpack_require__(6);

	var fn = _interopRequireWildcard(_utilsFunctions);

	var _store = __webpack_require__(7);

	var store = _interopRequireWildcard(_store);

	var _utilsAltUtils = __webpack_require__(8);

	var utils = _interopRequireWildcard(_utilsAltUtils);

	var _actions = __webpack_require__(12);

	var _actions2 = _interopRequireDefault(_actions);

	var Alt = (function () {___jdce_logger("/node_modules/alt/dist/alt.js", 15);
	  function Alt() {___jdce_logger("/node_modules/alt/dist/alt.js", 16);
	    var config = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    _classCallCheck(this, Alt);

	    this.config = config;
	    this.serialize = config.serialize || JSON.stringify;
	    this.deserialize = config.deserialize || JSON.parse;
	    this.dispatcher = config.dispatcher || new _flux.Dispatcher();
	    this.batchingFunction = config.batchingFunction || function (callback) {___jdce_logger("/node_modules/alt/dist/alt.js", 17);
	      return callback();
	    };
	    this.actions = { global: {} };
	    this.stores = {};
	    this.storeTransforms = config.storeTransforms || [];
	    this.trapAsync = false;
	    this._actionsRegistry = {};
	    this._initSnapshot = {};
	    this._lastSnapshot = {};
	  }

	  _createClass(Alt, [{
	    key: 'dispatch',
	    value: function dispatch(action, data, details) {___jdce_logger("/node_modules/alt/dist/alt.js", 18);
	      var _this = this;

	      this.batchingFunction(function () {___jdce_logger("/node_modules/alt/dist/alt.js", 19);
	        var id = Math.random().toString(18).substr(2, 16);

	        if (action.id && action.dispatch) {
	          return utils.dispatch(id, action, data, _this);
	        }

	        return _this.dispatcher.dispatch({
	          id: id,
	          action: action,
	          data: data,
	          details: details
	        });
	      });
	    }
	  }, {
	    key: 'createUnsavedStore',
	    value: function createUnsavedStore(StoreModel) {___jdce_logger("/node_modules/alt/dist/alt.js", 20);
	      var key = StoreModel.displayName || '';
	      store.createStoreConfig(this.config, StoreModel);
	      var Store = store.transformStore(this.storeTransforms, StoreModel);

	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      return fn.isFunction(Store) ? store.createStoreFromClass.apply(store, [this, Store, key].concat(args)) : store.createStoreFromObject(this, Store, key);
	    }
	  }, {
	    key: 'createStore',
	    value: function createStore(StoreModel, iden) {___jdce_logger("/node_modules/alt/dist/alt.js", 21);
	      var key = iden || StoreModel.displayName || StoreModel.name || '';
	      store.createStoreConfig(this.config, StoreModel);
	      var Store = store.transformStore(this.storeTransforms, StoreModel);

	      /* istanbul ignore next */
	      if (false) delete this.stores[key];

	      if (this.stores[key] || !key) {
	        if (this.stores[key]) {
	          utils.warn('A store named ' + key + ' already exists, double check your store ' + 'names or pass in your own custom identifier for each store');
	        } else {
	          utils.warn('Store name was not specified');
	        }

	        key = utils.uid(this.stores, key);
	      }

	      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	        args[_key2 - 2] = arguments[_key2];
	      }

	      var storeInstance = fn.isFunction(Store) ? store.createStoreFromClass.apply(store, [this, Store, key].concat(args)) : store.createStoreFromObject(this, Store, key);

	      this.stores[key] = storeInstance;
	      StateFunctions.saveInitialSnapshot(this, key);

	      return storeInstance;
	    }
	  }, {
	    key: 'generateActions',
	    value: function generateActions() {___jdce_logger("/node_modules/alt/dist/alt.js", 22);
	      var actions = { name: 'global' };

	      for (var _len3 = arguments.length, actionNames = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	        actionNames[_key3] = arguments[_key3];
	      }

	      return this.createActions(actionNames.reduce(function (obj, action) {___jdce_logger("/node_modules/alt/dist/alt.js", 23);
	        obj[action] = utils.dispatchIdentity;
	        return obj;
	      }, actions));
	    }
	  }, {
	    key: 'createAction',
	    value: function createAction(name, implementation, obj) {___jdce_logger("/node_modules/alt/dist/alt.js", 24);
	      return (0, _actions2['default'])(this, 'global', name, implementation, obj);
	    }
	  }, {
	    key: 'createActions',
	    value: function createActions(ActionsClass) {___jdce_logger("/node_modules/alt/dist/alt.js", 25);
	      var _arguments2 = arguments,
	          _this2 = this;

	      var exportObj = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      var actions = {};
	      var key = utils.uid(this._actionsRegistry, ActionsClass.displayName || ActionsClass.name || 'Unknown');

	      if (fn.isFunction(ActionsClass)) {
	        var _len4, argsForConstructor, _key4;

	        (function () {___jdce_logger("/node_modules/alt/dist/alt.js", 26);
	          fn.assign(actions, utils.getInternalMethods(ActionsClass, true));

	          var ActionsGenerator = (function (_ActionsClass) {___jdce_logger("/node_modules/alt/dist/alt.js", 27);
	            _inherits(ActionsGenerator, _ActionsClass);

	            function ActionsGenerator() {___jdce_logger("/node_modules/alt/dist/alt.js", 28);
	              _classCallCheck(this, ActionsGenerator);

	              for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
	                args[_key5] = arguments[_key5];
	              }

	              _get(Object.getPrototypeOf(ActionsGenerator.prototype), 'constructor', this).apply(this, args);
	            }

	            _createClass(ActionsGenerator, [{
	              key: 'generateActions',
	              value: function generateActions() {___jdce_logger("/node_modules/alt/dist/alt.js", 29);
	                for (var _len6 = arguments.length, actionNames = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
	                  actionNames[_key6] = arguments[_key6];
	                }

	                actionNames.forEach(function (actionName) {___jdce_logger("/node_modules/alt/dist/alt.js", 30);
	                  actions[actionName] = utils.dispatchIdentity;
	                });
	              }
	            }]);

	            return ActionsGenerator;
	          })(ActionsClass);

	          for (_len4 = _arguments2.length, argsForConstructor = Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {
	            argsForConstructor[_key4 - 2] = _arguments2[_key4];
	          }

	          fn.assign(actions, new (_bind.apply(ActionsGenerator, [null].concat(_toConsumableArray(argsForConstructor))))());
	        })();
	      } else {
	        fn.assign(actions, ActionsClass);
	      }

	      this.actions[key] = this.actions[key] || {};

	      fn.eachObject(function (actionName, action) {___jdce_logger("/node_modules/alt/dist/alt.js", 31);
	        if (!fn.isFunction(action)) {
	          return;
	        }

	        // create the action
	        exportObj[actionName] = (0, _actions2['default'])(_this2, key, actionName, action, exportObj);

	        // generate a constant
	        var constant = utils.formatAsConstant(actionName);
	        exportObj[constant] = exportObj[actionName].id;
	      }, [actions]);
	      return exportObj;
	    }
	  }, {
	    key: 'takeSnapshot',
	    value: function takeSnapshot() {___jdce_logger("/node_modules/alt/dist/alt.js", 32);
	      for (var _len7 = arguments.length, storeNames = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
	        storeNames[_key7] = arguments[_key7];
	      }

	      var state = StateFunctions.snapshot(this, storeNames);
	      fn.assign(this._lastSnapshot, state);
	      return this.serialize(state);
	    }
	  }, {
	    key: 'rollback',
	    value: function rollback() {___jdce_logger("/node_modules/alt/dist/alt.js", 33);
	      StateFunctions.setAppState(this, this.serialize(this._lastSnapshot), function (storeInst) {___jdce_logger("/node_modules/alt/dist/alt.js", 34);
	        storeInst.lifecycle('rollback');
	        storeInst.emitChange();
	      });
	    }
	  }, {
	    key: 'recycle',
	    value: function recycle() {___jdce_logger("/node_modules/alt/dist/alt.js", 35);
	      for (var _len8 = arguments.length, storeNames = Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
	        storeNames[_key8] = arguments[_key8];
	      }

	      var initialSnapshot = storeNames.length ? StateFunctions.filterSnapshots(this, this._initSnapshot, storeNames) : this._initSnapshot;

	      StateFunctions.setAppState(this, this.serialize(initialSnapshot), function (storeInst) {___jdce_logger("/node_modules/alt/dist/alt.js", 36);
	        storeInst.lifecycle('init');
	        storeInst.emitChange();
	      });
	    }
	  }, {
	    key: 'flush',
	    value: function flush() {___jdce_logger("/node_modules/alt/dist/alt.js", 37);
	      var state = this.serialize(StateFunctions.snapshot(this));
	      this.recycle();
	      return state;
	    }
	  }, {
	    key: 'bootstrap',
	    value: function bootstrap(data) {___jdce_logger("/node_modules/alt/dist/alt.js", 38);
	      StateFunctions.setAppState(this, data, function (storeInst, state) {___jdce_logger("/node_modules/alt/dist/alt.js", 39);
	        storeInst.lifecycle('bootstrap', state);
	        storeInst.emitChange();
	      });
	    }
	  }, {
	    key: 'prepare',
	    value: function prepare(storeInst, payload) {___jdce_logger("/node_modules/alt/dist/alt.js", 40);
	      var data = {};
	      if (!storeInst.displayName) {
	        throw new ReferenceError('Store provided does not have a name');
	      }
	      data[storeInst.displayName] = payload;
	      return this.serialize(data);
	    }

	    // Instance type methods for injecting alt into your application as context

	  }, {
	    key: 'addActions',
	    value: function addActions(name, ActionsClass) {___jdce_logger("/node_modules/alt/dist/alt.js", 41);
	      for (var _len9 = arguments.length, args = Array(_len9 > 2 ? _len9 - 2 : 0), _key9 = 2; _key9 < _len9; _key9++) {
	        args[_key9 - 2] = arguments[_key9];
	      }

	      this.actions[name] = Array.isArray(ActionsClass) ? this.generateActions.apply(this, ActionsClass) : this.createActions.apply(this, [ActionsClass].concat(args));
	    }
	  }, {
	    key: 'addStore',
	    value: function addStore(name, StoreModel) {___jdce_logger("/node_modules/alt/dist/alt.js", 42);
	      for (var _len10 = arguments.length, args = Array(_len10 > 2 ? _len10 - 2 : 0), _key10 = 2; _key10 < _len10; _key10++) {
	        args[_key10 - 2] = arguments[_key10];
	      }

	      this.createStore.apply(this, [StoreModel, name].concat(args));
	    }
	  }, {
	    key: 'getActions',
	    value: function getActions(name) {___jdce_logger("/node_modules/alt/dist/alt.js", 43);
	      return this.actions[name];
	    }
	  }, {
	    key: 'getStore',
	    value: function getStore(name) {___jdce_logger("/node_modules/alt/dist/alt.js", 44);
	      return this.stores[name];
	    }
	  }], [{
	    key: 'debug',
	    value: function debug(name, alt) {___jdce_logger("/node_modules/alt/dist/alt.js", 45);
	      var key = 'alt.js.org';
	      if (typeof window !== 'undefined') {
	        window[key] = window[key] || [];
	        window[key].push({ name: name, alt: alt });
	      }
	      return alt;
	    }
	  }]);

	  return Alt;
	})();

	exports['default'] = Alt;
	module.exports = exports['default'];

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {___jdce_logger("/node_modules/alt/dist/alt.js", 46);

	/**
	 * Copyright (c) 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	module.exports.Dispatcher = __webpack_require__(3)


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {___jdce_logger("/node_modules/alt/dist/alt.js", 47);

	/*
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Dispatcher
	 * @typechecks
	 */

	"use strict";

	var invariant = __webpack_require__(4);

	var _lastID = 1;
	var _prefix = 'ID_';

	/**
	 * Dispatcher is used to broadcast payloads to registered callbacks. This is
	 * different from generic pub-sub systems in two ways:
	 *
	 *   1) Callbacks are not subscribed to particular events. Every payload is
	 *      dispatched to every registered callback.
	 *   2) Callbacks can be deferred in whole or part until other callbacks have
	 *      been executed.
	 *
	 * For example, consider this hypothetical flight destination form, which
	 * selects a default city when a country is selected:
	 *
	 *   var flightDispatcher = new Dispatcher();
	 *
	 *   // Keeps track of which country is selected
	 *   var CountryStore = {country: null};
	 *
	 *   // Keeps track of which city is selected
	 *   var CityStore = {city: null};
	 *
	 *   // Keeps track of the base flight price of the selected city
	 *   var FlightPriceStore = {price: null}
	 *
	 * When a user changes the selected city, we dispatch the payload:
	 *
	 *   flightDispatcher.dispatch({
	 *     actionType: 'city-update',
	 *     selectedCity: 'paris'
	 *   });
	 *
	 * This payload is digested by `CityStore`:
	 *
	 *   flightDispatcher.register(function(payload) {
	 *     if (payload.actionType === 'city-update') {
	 *       CityStore.city = payload.selectedCity;
	 *     }
	 *   });
	 *
	 * When the user selects a country, we dispatch the payload:
	 *
	 *   flightDispatcher.dispatch({
	 *     actionType: 'country-update',
	 *     selectedCountry: 'australia'
	 *   });
	 *
	 * This payload is digested by both stores:
	 *
	 *    CountryStore.dispatchToken = flightDispatcher.register(function(payload) {
	 *     if (payload.actionType === 'country-update') {
	 *       CountryStore.country = payload.selectedCountry;
	 *     }
	 *   });
	 *
	 * When the callback to update `CountryStore` is registered, we save a reference
	 * to the returned token. Using this token with `waitFor()`, we can guarantee
	 * that `CountryStore` is updated before the callback that updates `CityStore`
	 * needs to query its data.
	 *
	 *   CityStore.dispatchToken = flightDispatcher.register(function(payload) {
	 *     if (payload.actionType === 'country-update') {
	 *       // `CountryStore.country` may not be updated.
	 *       flightDispatcher.waitFor([CountryStore.dispatchToken]);
	 *       // `CountryStore.country` is now guaranteed to be updated.
	 *
	 *       // Select the default city for the new country
	 *       CityStore.city = getDefaultCityForCountry(CountryStore.country);
	 *     }
	 *   });
	 *
	 * The usage of `waitFor()` can be chained, for example:
	 *
	 *   FlightPriceStore.dispatchToken =
	 *     flightDispatcher.register(function(payload) {
	 *       switch (payload.actionType) {
	 *         case 'country-update':
	 *           flightDispatcher.waitFor([CityStore.dispatchToken]);
	 *           FlightPriceStore.price =
	 *             getFlightPriceStore(CountryStore.country, CityStore.city);
	 *           break;
	 *
	 *         case 'city-update':
	 *           FlightPriceStore.price =
	 *             FlightPriceStore(CountryStore.country, CityStore.city);
	 *           break;
	 *     }
	 *   });
	 *
	 * The `country-update` payload will be guaranteed to invoke the stores'
	 * registered callbacks in order: `CountryStore`, `CityStore`, then
	 * `FlightPriceStore`.
	 */

	  function Dispatcher() {___jdce_logger("/node_modules/alt/dist/alt.js", 48);
	    this.$Dispatcher_callbacks = {};
	    this.$Dispatcher_isPending = {};
	    this.$Dispatcher_isHandled = {};
	    this.$Dispatcher_isDispatching = false;
	    this.$Dispatcher_pendingPayload = null;
	  }

	  /**
	   * Registers a callback to be invoked with every dispatched payload. Returns
	   * a token that can be used with `waitFor()`.
	   *
	   * @param {function} callback
	   * @return {string}
	   */
	  Dispatcher.prototype.register=function(callback) {___jdce_logger("/node_modules/alt/dist/alt.js", 49);
	    var id = _prefix + _lastID++;
	    this.$Dispatcher_callbacks[id] = callback;
	    return id;
	  };

	  /**
	   * Removes a callback based on its token.
	   *
	   * @param {string} id
	   */
	  Dispatcher.prototype.unregister=function(id) {___jdce_logger("/node_modules/alt/dist/alt.js", 50);
	    invariant(
	      this.$Dispatcher_callbacks[id],
	      'Dispatcher.unregister(...): `%s` does not map to a registered callback.',
	      id
	    );
	    delete this.$Dispatcher_callbacks[id];
	  };

	  /**
	   * Waits for the callbacks specified to be invoked before continuing execution
	   * of the current callback. This method should only be used by a callback in
	   * response to a dispatched payload.
	   *
	   * @param {array<string>} ids
	   */
	  Dispatcher.prototype.waitFor=function(ids) {___jdce_logger("/node_modules/alt/dist/alt.js", 51);
	    invariant(
	      this.$Dispatcher_isDispatching,
	      'Dispatcher.waitFor(...): Must be invoked while dispatching.'
	    );
	    for (var ii = 0; ii < ids.length; ii++) {
	      var id = ids[ii];
	      if (this.$Dispatcher_isPending[id]) {
	        invariant(
	          this.$Dispatcher_isHandled[id],
	          'Dispatcher.waitFor(...): Circular dependency detected while ' +
	          'waiting for `%s`.',
	          id
	        );
	        continue;
	      }
	      invariant(
	        this.$Dispatcher_callbacks[id],
	        'Dispatcher.waitFor(...): `%s` does not map to a registered callback.',
	        id
	      );
	      this.$Dispatcher_invokeCallback(id);
	    }
	  };

	  /**
	   * Dispatches a payload to all registered callbacks.
	   *
	   * @param {object} payload
	   */
	  Dispatcher.prototype.dispatch=function(payload) {___jdce_logger("/node_modules/alt/dist/alt.js", 52);
	    invariant(
	      !this.$Dispatcher_isDispatching,
	      'Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch.'
	    );
	    this.$Dispatcher_startDispatching(payload);
	    try {
	      for (var id in this.$Dispatcher_callbacks) {
	        if (this.$Dispatcher_isPending[id]) {
	          continue;
	        }
	        this.$Dispatcher_invokeCallback(id);
	      }
	    } finally {
	      this.$Dispatcher_stopDispatching();
	    }
	  };

	  /**
	   * Is this Dispatcher currently dispatching.
	   *
	   * @return {boolean}
	   */
	  Dispatcher.prototype.isDispatching=function() {___jdce_logger("/node_modules/alt/dist/alt.js", 53);
	    return this.$Dispatcher_isDispatching;
	  };

	  /**
	   * Call the callback stored with the given id. Also do some internal
	   * bookkeeping.
	   *
	   * @param {string} id
	   * @internal
	   */
	  Dispatcher.prototype.$Dispatcher_invokeCallback=function(id) {___jdce_logger("/node_modules/alt/dist/alt.js", 54);
	    this.$Dispatcher_isPending[id] = true;
	    this.$Dispatcher_callbacks[id](this.$Dispatcher_pendingPayload);
	    this.$Dispatcher_isHandled[id] = true;
	  };

	  /**
	   * Set up bookkeeping needed when dispatching.
	   *
	   * @param {object} payload
	   * @internal
	   */
	  Dispatcher.prototype.$Dispatcher_startDispatching=function(payload) {___jdce_logger("/node_modules/alt/dist/alt.js", 55);
	    for (var id in this.$Dispatcher_callbacks) {
	      this.$Dispatcher_isPending[id] = false;
	      this.$Dispatcher_isHandled[id] = false;
	    }
	    this.$Dispatcher_pendingPayload = payload;
	    this.$Dispatcher_isDispatching = true;
	  };

	  /**
	   * Clear bookkeeping used for dispatching.
	   *
	   * @internal
	   */
	  Dispatcher.prototype.$Dispatcher_stopDispatching=function() {___jdce_logger("/node_modules/alt/dist/alt.js", 56);
	    this.$Dispatcher_pendingPayload = null;
	    this.$Dispatcher_isDispatching = false;
	  };


	module.exports = Dispatcher;


/***/ },
/* 4 */
/***/ function(module, exports) {___jdce_logger("/node_modules/alt/dist/alt.js", 57);

	/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule invariant
	 */

	"use strict";

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function(condition, format, a, b, c, d, e, f) {___jdce_logger("/node_modules/alt/dist/alt.js", 58);
	  if (false) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        'Invariant Violation: ' +
	        format.replace(/%s/g, function() {___jdce_logger("/node_modules/alt/dist/alt.js", 59); return args[argIndex++]; })
	      );
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {___jdce_logger("/node_modules/alt/dist/alt.js", 60);

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports.setAppState = setAppState;
	exports.snapshot = snapshot;
	exports.saveInitialSnapshot = saveInitialSnapshot;
	exports.filterSnapshots = filterSnapshots;

	function _interopRequireWildcard(obj) {___jdce_logger("/node_modules/alt/dist/alt.js", 61); if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	var _utilsFunctions = __webpack_require__(6);

	var fn = _interopRequireWildcard(_utilsFunctions);

	function setAppState(instance, data, onStore) {___jdce_logger("/node_modules/alt/dist/alt.js", 62);
	  var obj = instance.deserialize(data);
	  fn.eachObject(function (key, value) {___jdce_logger("/node_modules/alt/dist/alt.js", 63);
	    var store = instance.stores[key];
	    if (store) {
	      (function () {___jdce_logger("/node_modules/alt/dist/alt.js", 64);
	        var config = store.StoreModel.config;

	        var state = store.state;
	        if (config.onDeserialize) obj[key] = config.onDeserialize(value) || value;
	        if (fn.isPojo(state)) {
	          fn.eachObject(function (k) {___jdce_logger("/node_modules/alt/dist/alt.js", 65);
	            return delete state[k];
	          }, [state]);
	          fn.assign(state, obj[key]);
	        } else {
	          store.state = obj[key];
	        }
	        onStore(store, store.state);
	      })();
	    }
	  }, [obj]);
	}

	function snapshot(instance) {___jdce_logger("/node_modules/alt/dist/alt.js", 66);
	  var storeNames = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

	  var stores = storeNames.length ? storeNames : Object.keys(instance.stores);
	  return stores.reduce(function (obj, storeHandle) {___jdce_logger("/node_modules/alt/dist/alt.js", 67);
	    var storeName = storeHandle.displayName || storeHandle;
	    var store = instance.stores[storeName];
	    var config = store.StoreModel.config;

	    store.lifecycle('snapshot');
	    var customSnapshot = config.onSerialize && config.onSerialize(store.state);
	    obj[storeName] = customSnapshot ? customSnapshot : store.getState();
	    return obj;
	  }, {});
	}

	function saveInitialSnapshot(instance, key) {___jdce_logger("/node_modules/alt/dist/alt.js", 68);
	  var state = instance.deserialize(instance.serialize(instance.stores[key].state));
	  instance._initSnapshot[key] = state;
	  instance._lastSnapshot[key] = state;
	}

	function filterSnapshots(instance, state, stores) {___jdce_logger("/node_modules/alt/dist/alt.js", 69);
	  return stores.reduce(function (obj, store) {___jdce_logger("/node_modules/alt/dist/alt.js", 70);
	    var storeName = store.displayName || store;
	    if (!state[storeName]) {
	      throw new ReferenceError(storeName + ' is not a valid store');
	    }
	    obj[storeName] = state[storeName];
	    return obj;
	  }, {});
	}

/***/ },
/* 6 */
/***/ function(module, exports) {___jdce_logger("/node_modules/alt/dist/alt.js", 71);

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports.isPojo = isPojo;
	exports.isPromise = isPromise;
	exports.eachObject = eachObject;
	exports.assign = assign;
	var isFunction = function isFunction(x) {___jdce_logger("/node_modules/alt/dist/alt.js", 72);
	  return typeof x === 'function';
	};

	exports.isFunction = isFunction;

	function isPojo(target) {___jdce_logger("/node_modules/alt/dist/alt.js", 73);
	  var Ctor = target.constructor;

	  return !!target && typeof target === 'object' && Object.prototype.toString.call(target) === '[object Object]' && isFunction(Ctor) && (Ctor instanceof Ctor || target.type === 'AltStore');
	}

	function isPromise(obj) {___jdce_logger("/node_modules/alt/dist/alt.js", 74);
	  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';
	}

	function eachObject(f, o) {___jdce_logger("/node_modules/alt/dist/alt.js", 75);
	  o.forEach(function (from) {___jdce_logger("/node_modules/alt/dist/alt.js", 76);
	    Object.keys(Object(from)).forEach(function (key) {___jdce_logger("/node_modules/alt/dist/alt.js", 77);
	      f(key, from[key]);
	    });
	  });
	}

	function assign(target) {___jdce_logger("/node_modules/alt/dist/alt.js", 78);
	  for (var _len = arguments.length, source = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    source[_key - 1] = arguments[_key];
	  }

	  eachObject(function (key, value) {___jdce_logger("/node_modules/alt/dist/alt.js", 79);
	    return target[key] = value;
	  }, source);
	  return target;
	}

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {___jdce_logger("/node_modules/alt/dist/alt.js", 80);

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	var _bind = Function.prototype.bind;

	var _get = function get(_x, _x2, _x3) {___jdce_logger("/node_modules/alt/dist/alt.js", 81); var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	exports.createStoreConfig = createStoreConfig;
	exports.transformStore = transformStore;
	exports.createStoreFromObject = createStoreFromObject;
	exports.createStoreFromClass = createStoreFromClass;

	function _interopRequireDefault(obj) {___jdce_logger("/node_modules/alt/dist/alt.js", 82); return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _interopRequireWildcard(obj) {___jdce_logger("/node_modules/alt/dist/alt.js", 83); if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) {___jdce_logger("/node_modules/alt/dist/alt.js", 84); if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) {___jdce_logger("/node_modules/alt/dist/alt.js", 85); if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _utilsAltUtils = __webpack_require__(8);

	var utils = _interopRequireWildcard(_utilsAltUtils);

	var _utilsFunctions = __webpack_require__(6);

	var fn = _interopRequireWildcard(_utilsFunctions);

	var _AltStore = __webpack_require__(9);

	var _AltStore2 = _interopRequireDefault(_AltStore);

	var _StoreMixin = __webpack_require__(11);

	var _StoreMixin2 = _interopRequireDefault(_StoreMixin);

	function doSetState(store, storeInstance, state) {___jdce_logger("/node_modules/alt/dist/alt.js", 86);
	  if (!state) {
	    return;
	  }

	  var config = storeInstance.StoreModel.config;

	  var nextState = fn.isFunction(state) ? state(storeInstance.state) : state;

	  storeInstance.state = config.setState.call(store, storeInstance.state, nextState);

	  if (!store.alt.dispatcher.isDispatching()) {
	    store.emitChange();
	  }
	}

	function createPrototype(proto, alt, key, extras) {___jdce_logger("/node_modules/alt/dist/alt.js", 87);
	  return fn.assign(proto, _StoreMixin2['default'], {
	    displayName: key,
	    alt: alt,
	    dispatcher: alt.dispatcher,
	    preventDefault: function preventDefault() {___jdce_logger("/node_modules/alt/dist/alt.js", 88);
	      this.getInstance().preventDefault = true;
	    },
	    boundListeners: [],
	    lifecycleEvents: {},
	    actionListeners: {},
	    publicMethods: {},
	    handlesOwnErrors: false
	  }, extras);
	}

	function createStoreConfig(globalConfig, StoreModel) {___jdce_logger("/node_modules/alt/dist/alt.js", 89);
	  StoreModel.config = fn.assign({
	    getState: function getState(state) {___jdce_logger("/node_modules/alt/dist/alt.js", 90);
	      if (Array.isArray(state)) {
	        return state.slice();
	      } else if (fn.isPojo(state)) {
	        return fn.assign({}, state);
	      }

	      return state;
	    },
	    setState: function setState(currentState, nextState) {___jdce_logger("/node_modules/alt/dist/alt.js", 91);
	      if (fn.isPojo(nextState)) {
	        return fn.assign(currentState, nextState);
	      }
	      return nextState;
	    }
	  }, globalConfig, StoreModel.config);
	}

	function transformStore(transforms, StoreModel) {___jdce_logger("/node_modules/alt/dist/alt.js", 92);
	  return transforms.reduce(function (Store, transform) {___jdce_logger("/node_modules/alt/dist/alt.js", 93);
	    return transform(Store);
	  }, StoreModel);
	}

	function createStoreFromObject(alt, StoreModel, key) {___jdce_logger("/node_modules/alt/dist/alt.js", 94);
	  var storeInstance = undefined;

	  var StoreProto = createPrototype({}, alt, key, fn.assign({
	    getInstance: function getInstance() {___jdce_logger("/node_modules/alt/dist/alt.js", 95);
	      return storeInstance;
	    },
	    setState: function setState(nextState) {___jdce_logger("/node_modules/alt/dist/alt.js", 96);
	      doSetState(this, storeInstance, nextState);
	    }
	  }, StoreModel));

	  // bind the store listeners
	  /* istanbul ignore else */
	  if (StoreProto.bindListeners) {
	    _StoreMixin2['default'].bindListeners.call(StoreProto, StoreProto.bindListeners);
	  }
	  /* istanbul ignore else */
	  if (StoreProto.observe) {
	    _StoreMixin2['default'].bindListeners.call(StoreProto, StoreProto.observe(alt));
	  }

	  // bind the lifecycle events
	  /* istanbul ignore else */
	  if (StoreProto.lifecycle) {
	    fn.eachObject(function (eventName, event) {___jdce_logger("/node_modules/alt/dist/alt.js", 97);
	      _StoreMixin2['default'].on.call(StoreProto, eventName, event);
	    }, [StoreProto.lifecycle]);
	  }

	  // create the instance and fn.assign the public methods to the instance
	  storeInstance = fn.assign(new _AltStore2['default'](alt, StoreProto, StoreProto.state !== undefined ? StoreProto.state : {}, StoreModel), StoreProto.publicMethods, { displayName: key });

	  return storeInstance;
	}

	function createStoreFromClass(alt, StoreModel, key) {___jdce_logger("/node_modules/alt/dist/alt.js", 98);
	  var storeInstance = undefined;
	  var config = StoreModel.config;

	  // Creating a class here so we don't overload the provided store's
	  // prototype with the mixin behaviour and I'm extending from StoreModel
	  // so we can inherit any extensions from the provided store.

	  var Store = (function (_StoreModel) {___jdce_logger("/node_modules/alt/dist/alt.js", 99);
	    _inherits(Store, _StoreModel);

	    function Store() {___jdce_logger("/node_modules/alt/dist/alt.js", 100);
	      _classCallCheck(this, Store);

	      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	        args[_key2] = arguments[_key2];
	      }

	      _get(Object.getPrototypeOf(Store.prototype), 'constructor', this).apply(this, args);
	    }

	    return Store;
	  })(StoreModel);

	  createPrototype(Store.prototype, alt, key, {
	    type: 'AltStore',
	    getInstance: function getInstance() {___jdce_logger("/node_modules/alt/dist/alt.js", 101);
	      return storeInstance;
	    },
	    setState: function setState(nextState) {___jdce_logger("/node_modules/alt/dist/alt.js", 102);
	      doSetState(this, storeInstance, nextState);
	    }
	  });

	  for (var _len = arguments.length, argsForClass = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
	    argsForClass[_key - 3] = arguments[_key];
	  }

	  var store = new (_bind.apply(Store, [null].concat(argsForClass)))();

	  if (config.bindListeners) store.bindListeners(config.bindListeners);
	  if (config.datasource) store.registerAsync(config.datasource);

	  storeInstance = fn.assign(new _AltStore2['default'](alt, store, store.state !== undefined ? store.state : store, StoreModel), utils.getInternalMethods(StoreModel), config.publicMethods, { displayName: key });

	  return storeInstance;
	}

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {___jdce_logger("/node_modules/alt/dist/alt.js", 103);

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports.getInternalMethods = getInternalMethods;
	exports.warn = warn;
	exports.uid = uid;
	exports.formatAsConstant = formatAsConstant;
	exports.dispatchIdentity = dispatchIdentity;
	exports.dispatch = dispatch;

	function _interopRequireWildcard(obj) {___jdce_logger("/node_modules/alt/dist/alt.js", 104); if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	var _utilsFunctions = __webpack_require__(6);

	var fn = _interopRequireWildcard(_utilsFunctions);

	/*eslint-disable*/
	var builtIns = Object.getOwnPropertyNames(NoopClass);
	var builtInProto = Object.getOwnPropertyNames(NoopClass.prototype);
	/*eslint-enable*/

	function getInternalMethods(Obj, isProto) {___jdce_logger("/node_modules/alt/dist/alt.js", 105);
	  var excluded = isProto ? builtInProto : builtIns;
	  var obj = isProto ? Obj.prototype : Obj;
	  return Object.getOwnPropertyNames(obj).reduce(function (value, m) {___jdce_logger("/node_modules/alt/dist/alt.js", 106);
	    if (excluded.indexOf(m) !== -1) {
	      return value;
	    }

	    value[m] = obj[m];
	    return value;
	  }, {});
	}

	function warn(msg) {___jdce_logger("/node_modules/alt/dist/alt.js", 107);
	  /* istanbul ignore else */
	  /*eslint-disable*/
	  if (typeof console !== 'undefined') {
	    console.warn(new ReferenceError(msg));
	  }
	  /*eslint-enable*/
	}

	function uid(container, name) {___jdce_logger("/node_modules/alt/dist/alt.js", 108);
	  var count = 0;
	  var key = name;
	  while (Object.hasOwnProperty.call(container, key)) {
	    key = name + String(++count);
	  }
	  return key;
	}

	function formatAsConstant(name) {___jdce_logger("/node_modules/alt/dist/alt.js", 109);
	  return name.replace(/[a-z]([A-Z])/g, function (i) {___jdce_logger("/node_modules/alt/dist/alt.js", 110);
	    return i[0] + '_' + i[1].toLowerCase();
	  }).toUpperCase();
	}

	function dispatchIdentity(x) {___jdce_logger("/node_modules/alt/dist/alt.js", 111);
	  for (var _len = arguments.length, a = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    a[_key - 1] = arguments[_key];
	  }

	  this.dispatch(a.length ? [x].concat(a) : x);
	}

	function dispatch(id, actionObj, payload, alt) {___jdce_logger("/node_modules/alt/dist/alt.js", 112);
	  var data = actionObj.dispatch(payload);
	  if (data === undefined) return null;

	  var type = actionObj.id;
	  var namespace = type;
	  var name = type;
	  var details = { id: type, namespace: namespace, name: name };

	  var dispatchLater = function dispatchLater(x) {___jdce_logger("/node_modules/alt/dist/alt.js", 113);
	    return alt.dispatch(type, x, details);
	  };

	  if (fn.isFunction(data)) return data(dispatchLater, alt);

	  return alt.dispatcher.dispatch({
	    id: id,
	    action: type,
	    data: data,
	    details: details
	  });
	}

	/* istanbul ignore next */
	function NoopClass() {___jdce_logger("/node_modules/alt/dist/alt.js", 114);}

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {___jdce_logger("/node_modules/alt/dist/alt.js", 115);

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () {___jdce_logger("/node_modules/alt/dist/alt.js", 116); function defineProperties(target, props) {___jdce_logger("/node_modules/alt/dist/alt.js", 117); for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) {___jdce_logger("/node_modules/alt/dist/alt.js", 118); if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireDefault(obj) {___jdce_logger("/node_modules/alt/dist/alt.js", 119); return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _interopRequireWildcard(obj) {___jdce_logger("/node_modules/alt/dist/alt.js", 120); if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) {___jdce_logger("/node_modules/alt/dist/alt.js", 121); if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _utilsFunctions = __webpack_require__(6);

	var fn = _interopRequireWildcard(_utilsFunctions);

	var _transmitter = __webpack_require__(10);

	var _transmitter2 = _interopRequireDefault(_transmitter);

	var AltStore = (function () {___jdce_logger("/node_modules/alt/dist/alt.js", 122);
	  function AltStore(alt, model, state, StoreModel) {___jdce_logger("/node_modules/alt/dist/alt.js", 123);
	    var _this = this;

	    _classCallCheck(this, AltStore);

	    var lifecycleEvents = model.lifecycleEvents;
	    this.transmitter = (0, _transmitter2['default'])();
	    this.lifecycle = function (event, x) {___jdce_logger("/node_modules/alt/dist/alt.js", 124);
	      if (lifecycleEvents[event]) lifecycleEvents[event].push(x);
	    };
	    this.state = state;

	    this.alt = alt;
	    this.preventDefault = false;
	    this.displayName = model.displayName;
	    this.boundListeners = model.boundListeners;
	    this.StoreModel = StoreModel;
	    this.reduce = model.reduce || function (x) {___jdce_logger("/node_modules/alt/dist/alt.js", 125);
	      return x;
	    };

	    var output = model.output || function (x) {___jdce_logger("/node_modules/alt/dist/alt.js", 126);
	      return x;
	    };

	    this.emitChange = function () {___jdce_logger("/node_modules/alt/dist/alt.js", 127);
	      return _this.transmitter.push(output(_this.state));
	    };

	    var handleDispatch = function handleDispatch(f, payload) {___jdce_logger("/node_modules/alt/dist/alt.js", 128);
	      try {
	        return f();
	      } catch (e) {
	        if (model.handlesOwnErrors) {
	          _this.lifecycle('error', {
	            error: e,
	            payload: payload,
	            state: _this.state
	          });
	          return false;
	        }

	        throw e;
	      }
	    };

	    fn.assign(this, model.publicMethods);

	    // Register dispatcher
	    this.dispatchToken = alt.dispatcher.register(function (payload) {___jdce_logger("/node_modules/alt/dist/alt.js", 129);
	      _this.preventDefault = false;

	      _this.lifecycle('beforeEach', {
	        payload: payload,
	        state: _this.state
	      });

	      var actionHandlers = model.actionListeners[payload.action];

	      if (actionHandlers || model.otherwise) {
	        var result = undefined;

	        if (actionHandlers) {
	          result = handleDispatch(function () {___jdce_logger("/node_modules/alt/dist/alt.js", 130);
	            return actionHandlers.filter(Boolean).every(function (handler) {___jdce_logger("/node_modules/alt/dist/alt.js", 131);
	              return handler.call(model, payload.data, payload.action) !== false;
	            });
	          }, payload);
	        } else {
	          result = handleDispatch(function () {___jdce_logger("/node_modules/alt/dist/alt.js", 132);
	            return model.otherwise(payload.data, payload.action);
	          }, payload);
	        }

	        if (result !== false && !_this.preventDefault) _this.emitChange();
	      }

	      if (model.reduce) {
	        handleDispatch(function () {___jdce_logger("/node_modules/alt/dist/alt.js", 133);
	          _this.state = model.reduce(_this.state, payload);
	        }, payload);
	        if (!_this.preventDefault) _this.emitChange();
	      }

	      _this.lifecycle('afterEach', {
	        payload: payload,
	        state: _this.state
	      });
	    });

	    this.lifecycle('init');
	  }

	  _createClass(AltStore, [{
	    key: 'listen',
	    value: function listen(cb) {___jdce_logger("/node_modules/alt/dist/alt.js", 134);
	      var _this2 = this;

	      if (!fn.isFunction(cb)) throw new TypeError('listen expects a function');
	      this.transmitter.subscribe(cb);
	      return function () {___jdce_logger("/node_modules/alt/dist/alt.js", 135);
	        return _this2.unlisten(cb);
	      };
	    }
	  }, {
	    key: 'unlisten',
	    value: function unlisten(cb) {___jdce_logger("/node_modules/alt/dist/alt.js", 136);
	      this.lifecycle('unlisten');
	      this.transmitter.unsubscribe(cb);
	    }
	  }, {
	    key: 'getState',
	    value: function getState() {___jdce_logger("/node_modules/alt/dist/alt.js", 137);
	      return this.StoreModel.config.getState.call(this, this.state);
	    }
	  }]);

	  return AltStore;
	})();

	exports['default'] = AltStore;
	module.exports = exports['default'];

/***/ },
/* 10 */
/***/ function(module, exports) {___jdce_logger("/node_modules/alt/dist/alt.js", 138);

	"use strict";

	function transmitter() {___jdce_logger("/node_modules/alt/dist/alt.js", 139);
	  var subscriptions = [];

	  var unsubscribe = function unsubscribe(onChange) {___jdce_logger("/node_modules/alt/dist/alt.js", 140);
	    var id = subscriptions.indexOf(onChange);
	    if (id >= 0) subscriptions.splice(id, 1);
	  };

	  var subscribe = function subscribe(onChange) {___jdce_logger("/node_modules/alt/dist/alt.js", 141);
	    subscriptions.push(onChange);
	    var dispose = function dispose() {___jdce_logger("/node_modules/alt/dist/alt.js", 142);
	      return unsubscribe(onChange);
	    };
	    return { dispose: dispose };
	  };

	  var push = function push(value) {___jdce_logger("/node_modules/alt/dist/alt.js", 143);
	    subscriptions.forEach(function (subscription) {___jdce_logger("/node_modules/alt/dist/alt.js", 144);
	      return subscription(value);
	    });
	  };

	  return { subscribe: subscribe, push: push, unsubscribe: unsubscribe };
	}

	module.exports = transmitter;

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {___jdce_logger("/node_modules/alt/dist/alt.js", 145);

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireWildcard(obj) {___jdce_logger("/node_modules/alt/dist/alt.js", 146); if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) {___jdce_logger("/node_modules/alt/dist/alt.js", 147); return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _transmitter = __webpack_require__(10);

	var _transmitter2 = _interopRequireDefault(_transmitter);

	var _utilsFunctions = __webpack_require__(6);

	var fn = _interopRequireWildcard(_utilsFunctions);

	var StoreMixin = {
	  waitFor: function waitFor() {___jdce_logger("/node_modules/alt/dist/alt.js", 148);
	    for (var _len = arguments.length, sources = Array(_len), _key = 0; _key < _len; _key++) {
	      sources[_key] = arguments[_key];
	    }

	    if (!sources.length) {
	      throw new ReferenceError('Dispatch tokens not provided');
	    }

	    var sourcesArray = sources;
	    if (sources.length === 1) {
	      sourcesArray = Array.isArray(sources[0]) ? sources[0] : sources;
	    }

	    var tokens = sourcesArray.map(function (source) {___jdce_logger("/node_modules/alt/dist/alt.js", 149);
	      return source.dispatchToken || source;
	    });

	    this.dispatcher.waitFor(tokens);
	  },

	  exportAsync: function exportAsync(asyncMethods) {___jdce_logger("/node_modules/alt/dist/alt.js", 150);
	    this.registerAsync(asyncMethods);
	  },

	  registerAsync: function registerAsync(asyncDef) {___jdce_logger("/node_modules/alt/dist/alt.js", 151);
	    var _this = this;

	    var loadCounter = 0;

	    var asyncMethods = fn.isFunction(asyncDef) ? asyncDef(this.alt) : asyncDef;

	    var toExport = Object.keys(asyncMethods).reduce(function (publicMethods, methodName) {___jdce_logger("/node_modules/alt/dist/alt.js", 152);
	      var desc = asyncMethods[methodName];
	      var spec = fn.isFunction(desc) ? desc(_this) : desc;

	      var validHandlers = ['success', 'error', 'loading'];
	      validHandlers.forEach(function (handler) {___jdce_logger("/node_modules/alt/dist/alt.js", 153);
	        if (spec[handler] && !spec[handler].id) {
	          throw new Error(handler + ' handler must be an action function');
	        }
	      });

	      publicMethods[methodName] = function () {___jdce_logger("/node_modules/alt/dist/alt.js", 154);
	        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	          args[_key2] = arguments[_key2];
	        }

	        var state = _this.getInstance().getState();
	        var value = spec.local && spec.local.apply(spec, [state].concat(args));
	        var shouldFetch = spec.shouldFetch ? spec.shouldFetch.apply(spec, [state].concat(args))
	        /*eslint-disable*/
	        : value == null;
	        /*eslint-enable*/
	        var intercept = spec.interceptResponse || function (x) {___jdce_logger("/node_modules/alt/dist/alt.js", 155);
	          return x;
	        };

	        var makeActionHandler = function makeActionHandler(action, isError) {___jdce_logger("/node_modules/alt/dist/alt.js", 156);
	          return function (x) {___jdce_logger("/node_modules/alt/dist/alt.js", 157);
	            var fire = function fire() {___jdce_logger("/node_modules/alt/dist/alt.js", 158);
	              loadCounter -= 1;
	              action(intercept(x, action, args));
	              if (isError) throw x;
	            };
	            return _this.alt.trapAsync ? function () {___jdce_logger("/node_modules/alt/dist/alt.js", 159);
	              return fire();
	            } : fire();
	          };
	        };

	        // if we don't have it in cache then fetch it
	        if (shouldFetch) {
	          loadCounter += 1;
	          /* istanbul ignore else */
	          if (spec.loading) spec.loading(intercept(null, spec.loading, args));
	          return spec.remote.apply(spec, [state].concat(args)).then(makeActionHandler(spec.success), makeActionHandler(spec.error, 1));
	        }

	        // otherwise emit the change now
	        _this.emitChange();
	        return value;
	      };

	      return publicMethods;
	    }, {});

	    this.exportPublicMethods(toExport);
	    this.exportPublicMethods({
	      isLoading: function isLoading() {___jdce_logger("/node_modules/alt/dist/alt.js", 160);
	        return loadCounter > 0;
	      }
	    });
	  },

	  exportPublicMethods: function exportPublicMethods(methods) {___jdce_logger("/node_modules/alt/dist/alt.js", 161);
	    var _this2 = this;

	    fn.eachObject(function (methodName, value) {___jdce_logger("/node_modules/alt/dist/alt.js", 162);
	      if (!fn.isFunction(value)) {
	        throw new TypeError('exportPublicMethods expects a function');
	      }

	      _this2.publicMethods[methodName] = value;
	    }, [methods]);
	  },

	  emitChange: function emitChange() {___jdce_logger("/node_modules/alt/dist/alt.js", 163);
	    this.getInstance().emitChange();
	  },

	  on: function on(lifecycleEvent, handler) {___jdce_logger("/node_modules/alt/dist/alt.js", 164);
	    if (lifecycleEvent === 'error') this.handlesOwnErrors = true;
	    var bus = this.lifecycleEvents[lifecycleEvent] || (0, _transmitter2['default'])();
	    this.lifecycleEvents[lifecycleEvent] = bus;
	    return bus.subscribe(handler.bind(this));
	  },

	  bindAction: function bindAction(symbol, handler) {___jdce_logger("/node_modules/alt/dist/alt.js", 165);
	    if (!symbol) {
	      throw new ReferenceError('Invalid action reference passed in');
	    }
	    if (!fn.isFunction(handler)) {
	      throw new TypeError('bindAction expects a function');
	    }

	    if (handler.length > 1) {
	      throw new TypeError('Action handler in store ' + this.displayName + ' for ' + ((symbol.id || symbol).toString() + ' was defined with ') + 'two parameters. Only a single parameter is passed through the ' + 'dispatcher, did you mean to pass in an Object instead?');
	    }

	    // You can pass in the constant or the function itself
	    var key = symbol.id ? symbol.id : symbol;
	    this.actionListeners[key] = this.actionListeners[key] || [];
	    this.actionListeners[key].push(handler.bind(this));
	    this.boundListeners.push(key);
	  },

	  bindActions: function bindActions(actions) {___jdce_logger("/node_modules/alt/dist/alt.js", 166);
	    var _this3 = this;

	    fn.eachObject(function (action, symbol) {___jdce_logger("/node_modules/alt/dist/alt.js", 167);
	      var matchFirstCharacter = /./;
	      var assumedEventHandler = action.replace(matchFirstCharacter, function (x) {___jdce_logger("/node_modules/alt/dist/alt.js", 168);
	        return 'on' + x[0].toUpperCase();
	      });

	      if (_this3[action] && _this3[assumedEventHandler]) {
	        // If you have both action and onAction
	        throw new ReferenceError('You have multiple action handlers bound to an action: ' + (action + ' and ' + assumedEventHandler));
	      }

	      var handler = _this3[action] || _this3[assumedEventHandler];
	      if (handler) {
	        _this3.bindAction(symbol, handler);
	      }
	    }, [actions]);
	  },

	  bindListeners: function bindListeners(obj) {___jdce_logger("/node_modules/alt/dist/alt.js", 169);
	    var _this4 = this;

	    fn.eachObject(function (methodName, symbol) {___jdce_logger("/node_modules/alt/dist/alt.js", 170);
	      var listener = _this4[methodName];

	      if (!listener) {
	        throw new ReferenceError(methodName + ' defined but does not exist in ' + _this4.displayName);
	      }

	      if (Array.isArray(symbol)) {
	        symbol.forEach(function (action) {___jdce_logger("/node_modules/alt/dist/alt.js", 171);
	          _this4.bindAction(action, listener);
	        });
	      } else {
	        _this4.bindAction(symbol, listener);
	      }
	    }, [obj]);
	  }
	};

	exports['default'] = StoreMixin;
	module.exports = exports['default'];

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {___jdce_logger("/node_modules/alt/dist/alt.js", 172);

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () {___jdce_logger("/node_modules/alt/dist/alt.js", 173); function defineProperties(target, props) {___jdce_logger("/node_modules/alt/dist/alt.js", 174); for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) {___jdce_logger("/node_modules/alt/dist/alt.js", 175); if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	exports['default'] = makeAction;

	function _interopRequireWildcard(obj) {___jdce_logger("/node_modules/alt/dist/alt.js", 176); if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) {___jdce_logger("/node_modules/alt/dist/alt.js", 177); if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _utilsFunctions = __webpack_require__(6);

	var fn = _interopRequireWildcard(_utilsFunctions);

	var _utilsAltUtils = __webpack_require__(8);

	var utils = _interopRequireWildcard(_utilsAltUtils);

	var AltAction = (function () {___jdce_logger("/node_modules/alt/dist/alt.js", 178);
	  function AltAction(alt, id, action, actions, actionDetails) {___jdce_logger("/node_modules/alt/dist/alt.js", 179);
	    _classCallCheck(this, AltAction);

	    this.id = id;
	    this._dispatch = action.bind(this);
	    this.actions = actions;
	    this.actionDetails = actionDetails;
	    this.alt = alt;
	  }

	  _createClass(AltAction, [{
	    key: 'dispatch',
	    value: function dispatch(data) {___jdce_logger("/node_modules/alt/dist/alt.js", 180);
	      this.dispatched = true;
	      this.alt.dispatch(this.id, data, this.actionDetails);
	    }
	  }]);

	  return AltAction;
	})();

	function makeAction(alt, namespace, name, implementation, obj) {___jdce_logger("/node_modules/alt/dist/alt.js", 181);
	  var id = utils.uid(alt._actionsRegistry, namespace + '.' + name);
	  alt._actionsRegistry[id] = 1;

	  var data = { id: id, namespace: namespace, name: name };

	  // Wrap the action so we can provide a dispatch method
	  var newAction = new AltAction(alt, id, implementation, obj, data);

	  var dispatch = function dispatch(payload) {___jdce_logger("/node_modules/alt/dist/alt.js", 182);
	    return alt.dispatch(id, payload, data);
	  };

	  // the action itself
	  var action = function action() {___jdce_logger("/node_modules/alt/dist/alt.js", 183);
	    newAction.dispatched = false;
	    var result = newAction._dispatch.apply(newAction, arguments);
	    // async functions that return promises should not be dispatched
	    if (!newAction.dispatched && result !== undefined && !fn.isPromise(result)) {
	      if (fn.isFunction(result)) {
	        result(dispatch, alt);
	      } else {
	        dispatch(result);
	      }
	    }

	    if (!newAction.dispatched && result === undefined) {
	      /* istanbul ignore else */
	      /*eslint-disable*/
	      if (typeof console !== 'undefined') {
	        console.warn('An action was called but nothing was dispatched');
	      }
	      /*eslint-enable*/
	    }

	    return result;
	  };
	  action.defer = function () {___jdce_logger("/node_modules/alt/dist/alt.js", 184);
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    setTimeout(function () {___jdce_logger("/node_modules/alt/dist/alt.js", 185);
	      newAction._dispatch.apply(null, args);
	    });
	  };
	  action.id = id;
	  action.data = data;

	  // ensure each reference is unique in the namespace
	  var container = alt.actions[namespace];
	  var namespaceId = utils.uid(container, name);
	  container[namespaceId] = action;

	  return action;
	}

	module.exports = exports['default'];

/***/ }
/******/ ])
});
;